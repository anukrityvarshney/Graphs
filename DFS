#include<bits/stdc++.h>
using namespace std;

class Graph{
    int v;
    list<int>*adj;
    void DFSUtil(int v, bool visited[]);
public:
    Graph(int v);
    void addEdge(int v, int w);
    void DFS(int v);
};

Graph::Graph(int v){
    this->v= v;
    adj= new list<int>[v];
}

void Graph::addEdge(int v, int w){
    adj[v].push_back(w);
    //adj[w].push_back(v);
}

void Graph::DFSUtil(int v, bool visited[]){
    visited[v]=true;
    cout<<v<<" ";
    list <int>::iterator i;
    for(i= adj[v].begin();i!=adj[v].end();++i)
        if(!visited[*i])DFSUtil(*i,visited);
}

void Graph::DFS(int v){
    bool*visited= new bool[v];
    for(int i =0;i<v;i++)visited[i]=false;
    DFSUtil(v,visited);
}

int main(){
    int v,e;
    cin>>v;//8;
 
    Graph g(v);
    /*
    cout<<"Enter the number of EDGES\n";
    cin>>e;//8;
    int edge1, edge2;
    char a;
    while((a = getchar())!= '\n'){
        cin>>edge1>>edge2;//1 2 1 3 2 4 2 6 6 7 3 5 3 8 1 8
        g.addEdge(edge1, edge2);
    }*/
    g.addEdge(1,2);
    g.addEdge(1,3);
    g.addEdge(2,4);
    g.addEdge(2,6);
    g.addEdge(6,7);
    g.addEdge(3,5);
    g.addEdge(3,8);
    g.addEdge(1,8);
    g.DFS(1);
    return 0;
}
